### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  changeSessionProject(projectId: String!): Boolean
  changeSubscriptionPlan(plan: String!, projectId: String!): Boolean
  createBillingPortalSession(projectId: String!): String
  createCheckoutSession(plan: String!, projectId: String!): String
  createProject(name: String!): Project
  createTemplate(key: String!, name: String!): ProjectTemplate
  deleteProject(id: String!): Boolean
  inviteUserToProject(email: String!, name: String!, projectId: String!): Boolean
  saveTemplate(data: JSONObject!, id: String!, key: String!, name: String!): Boolean
  updateProject(id: String!, name: String!): Project
}

enum PaidPlan {
  advanced
  basic
  pro
}

type Project {
  id: String!
  isPaying: Boolean
  name: String!
  subscriptions(after: SubscriptionWhereUniqueInput, before: SubscriptionWhereUniqueInput, first: Int, last: Int): [Subscription!]!
  users(after: ProjectUsersWhereUniqueInput, before: ProjectUsersWhereUniqueInput, first: Int, last: Int): [ProjectUsers!]!
}

type ProjectTemplate {
  data: JSONObject
  id: String!
  key: String!
  name: String!
}

enum ProjectUserRole {
  ADMIN
  USER
}

type ProjectUsers {
  project: Project!
  role: ProjectUserRole!
  user: User!
}

input ProjectUsersProjectIdUserIdCompoundUniqueInput {
  projectId: String!
  userId: Int!
}

input ProjectUsersWhereUniqueInput {
  projectId_userId: ProjectUsersProjectIdUserIdCompoundUniqueInput
}

type Query {
  currentUser: User
  project(id: String): Project
  projectUsers(projectId: String!): [User]
  projects: [Project]
  template(id: String!): ProjectTemplate
}

type Subscription {
  endDate: DateTime!
  externalProductId: String!
  id: String!
  planLevel: PaidPlan
}

input SubscriptionWhereUniqueInput {
  id: String
}

type User {
  email: String
  id: Int!
  name: String
  projects(after: ProjectUsersWhereUniqueInput, before: ProjectUsersWhereUniqueInput, first: Int, last: Int): [ProjectUsers!]!
}

type UserInvites {
  invitedBy: User!
  user: User!
}

enum UserRole {
  ADMIN
  USER
}
